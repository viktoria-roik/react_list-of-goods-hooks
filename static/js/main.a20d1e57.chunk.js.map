{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortBy","goodsFromServer","App","useState","Default","sortField","setSortField","isReversedField","setIsReversed","visibleGoods","goods","prepareGoods","sort","good1","good2","Name","localeCompare","Length","reverse","getPreparedGoods","className","type","onClick","cn","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,YAAAA,E,gBAAAA,E,YAAAA,M,KAiCE,IAAME,EAAgB,WAC3B,MAAkCC,mBAASH,EAAOI,SAAlD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAyCH,oBAAS,GAAlD,mBAAOI,EAAP,KAAwBC,EAAxB,KAEMC,EA/BR,SACEC,EACAL,EACAE,GAEA,IAAMI,EAAsB,YAAOD,GAiBnC,OAfIL,GACFM,EAAaC,MAAK,SAACC,EAAOC,GACxB,OAAQT,GACN,KAAKL,EAAOe,KACV,OAAOF,EAAMG,cAAcF,GAE7B,KAAKd,EAAOiB,OACV,OAAOJ,EAAMR,GAAaS,EAAMT,GAElC,QACE,OAAO,MAKRE,EACHI,EAAaO,UACbP,EAOiBQ,CACnBlB,EACAI,EACAE,GAQF,OACE,sBAAKa,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLC,QAAS,kBAAMhB,EAAaN,EAAOe,OACnCK,UAAWG,IACT,SACA,UACA,CAAE,WAAYlB,IAAcL,EAAOe,OANvC,iCAYA,wBACEM,KAAK,SACLC,QAAS,kBAAMhB,EAAaN,EAAOiB,SACnCG,UAAWG,IACT,SACA,aACA,CAAE,WAAYlB,IAAcL,EAAOiB,SANvC,4BAYA,wBACEI,KAAK,SACLC,QAAS,kBAAMd,GAAeD,IAC9Ba,UAAWG,IACT,SACA,aACA,CAAE,YAAahB,IANnB,sBAYEF,GAAaE,IACb,wBACEc,KAAK,SACLD,UAAU,4BACVE,QAhDiB,WACzBhB,EAAaN,EAAOI,SACpBI,GAAc,IA2CR,sBAUJ,6BACGC,EAAae,KAAI,SAAAC,GAAI,OACpB,oBACE,UAAQ,OADV,SAIGA,GAFIA,YCrHjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.a20d1e57.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortBy {\n  Name = 'name',\n  Length = 'length',\n  Default = '',\n}\n\nfunction getPreparedGoods(\n  goods: string[],\n  sortField: SortBy,\n  isReversedField: boolean,\n) {\n  const prepareGoods: string[] = [...goods];\n\n  if (sortField) {\n    prepareGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortBy.Name:\n          return good1.localeCompare(good2);\n\n        case SortBy.Length:\n          return good1[sortField] - good2[sortField];\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  return isReversedField\n    ? prepareGoods.reverse()\n    : prepareGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState(SortBy.Default);\n  const [isReversedField, setIsReversed] = useState(false);\n\n  const visibleGoods = getPreparedGoods(\n    goodsFromServer,\n    sortField,\n    isReversedField,\n  );\n\n  const handleResetClicked = () => {\n    setSortField(SortBy.Default);\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          onClick={() => setSortField(SortBy.Name)}\n          className={cn(\n            'button',\n            'is-info',\n            { 'is-light': sortField !== SortBy.Name },\n          )}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => setSortField(SortBy.Length)}\n          className={cn(\n            'button',\n            'is-success',\n            { 'is-light': sortField !== SortBy.Length },\n          )}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => setIsReversed(!isReversedField)}\n          className={cn(\n            'button',\n            'is-warning',\n            { 'is-light': !isReversedField },\n          )}\n        >\n          Reverse\n        </button>\n\n        {(sortField || isReversedField) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={handleResetClicked}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li\n            data-cy=\"Good\"\n            key={good}\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}